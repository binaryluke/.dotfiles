{
	// Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Create test file": {
		"prefix": "jest",
		"body": "import * as React from 'react';\nimport { render, cleanup, act, RenderResult } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from 'app/theme';\nimport { $1 } from '.';\n\nlet result: RenderResult;\n\nconst mockFn = jest.fn(() => {});\nconst fetchMock = fetch as any;\n\nfetchMock\n.get('end:/temp', {}, {});\n\ndescribe.only('$2', () => {\nbeforeEach(() => {\nresult = render(\n<ThemeProvider theme={theme}>\n<$1 />\n</ThemeProvider>,\n;\n});\n\nafterEach(() => {\nfetchMock.resetHistory();\nmockFn.mockReset();\ncleanup();\n});\n\nit('$3', async () => {\n$4\n});\n});\n",
		"description": "A basic Jest test file"
	}
}